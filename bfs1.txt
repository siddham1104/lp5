#include <iostream>
#include <queue>
#include <omp.h>
#include <vector>

using namespace std;

struct TreeNode
{
    int val;
    TreeNode *left;
    TreeNode *right;

    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int val) : val(val), left(nullptr), right(nullptr) {}
    TreeNode(int val, TreeNode *left, TreeNode *right) : val(val), left(left), right(right) {}
};

class Solution
{
public:
    vector<vector<int>> seqBfs(TreeNode *root)
    {
        vector<vector<int>> ans;
        if (root == nullptr)
        {
            return ans;
        }
        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty())
        {
            int size = q.size();
            vector<int> level;

            for (int i = 0; i < size; i++)
            {
                TreeNode *node = q.front();
                q.pop();

                level.push_back(node->val);

                if (node->left != nullptr)
                {
                    q.push(node->left);
                }
                if (node->right != nullptr)
                {
                    q.push(node->right);
                }
            }
            ans.push_back(level);
        }
        return ans;
    }

    vector<vector<int>> parallelBfs(TreeNode *root)
    {
        vector<vector<int>> ans;
        if (root == nullptr)
        {
            return ans;
        }
        queue<TreeNode *> q;
        q.push(root);

        while (!q.empty())
        {
            int size = q.size();
            vector<int> level;

#pragma omp parallel for shared(q, level) schedule(static)
            for (int i = 0; i < size; i++)
            {
                TreeNode *node;

#pragma omp critical
                {
                    node = q.front();
                    q.pop();
                }
                level.push_back(node->val);

                if (node->left)
                {
#pragma omp critical
                    {
                        q.push(node->left);
                    }
                }
                if (node->right)
                {
#pragma omp critical
                    {
                        q.push(node->right);
                    }
                }
            }
#pragma omp critical
            {
                ans.push_back(level);
            }
        }

        return ans;
    }
};

void printVector(const vector<int> &level)
{
    for (int num : level)
    {
        cout << num << " ";
    }
    cout << endl;
}

int main()
{

    TreeNode *root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);

    Solution solution;

    cout << "Sequential BFS:" << endl;
    // double seqS = omp_get_wtime();
    vector<vector<int>> sequentialResult = solution.seqBfs(root);
    // double seqE = omp_get_wtime();
    for (const vector<int> &level : sequentialResult)
    {
        printVector(level);
    }

    cout << "Parallel BFS:" << endl;
    // double paraS = omp_get_wtime();
    vector<vector<int>> parallelResult = solution.parallelBfs(root);
    // double paraE = omp_get_wtime();
    for (const vector<int> &level : parallelResult)
    {
        printVector(level);
    }

    return 0;
}