#include<iostream>
#include<omp.h>

using namespace std;

void min(int* arr, int n){

    int min_val = 10000;
    #pragma omp parallel for reduction(min : min_val) 
    {
        for(int i=0;i<n;i++){
            if(arr[i] < min_val){
                min_val = arr[i];
            }
        }
    }

    cout<< "min is : "<< min_val<< endl;

}

void max(int* arr, int n){

    int max_val = 0;
    #pragma omp parallel for reduction(max : max_val)
    {
        for(int i =0;i<n;i++){
            if(arr[i] > max_val){
                max_val = arr[i];
            }
        }
    }

    cout<< "max is : "<< max_val<< endl;

}

void avg(int* arr, int n){

    int sum = 0, avg = 0;
    #pragma omp parallel for reduction( + : sum)
    {
        for(int i=0;i<n;i++){
            sum = sum + arr[i];
        }
    } 

    cout<< "sum is : "<< sum<< endl;
    cout<< "average is : "<< sum/n<< endl;

}

int main(){
    
    int n = 6;
    int arr[n];
    

    for(int i=0;i<n;i++){
        arr[i] = rand() /100;
    }

    cout<<"original array : ";
    for(int i=0;i<n;i++){
        cout<< arr[i] << " ";
    }
    cout<<endl;

    max(arr, n);
    min(arr, n);
    avg(arr, n);
    
    return 0;

}